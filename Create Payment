String baseUrl = 'Sandbox endpoint'; // Sandbox endpoint
String merchantId = ' Sandbox merchant ID'; // Sandbox merchant ID
String merchantSiteId = 'Sandbox site ID'; // Sandbox site ID
String secretKey = 'Sandbox secret key'; // Sandbox secret key
String sessionToken = 'sessionToken' //sessionToken generated by getSeeeionToken endpoint

if(sessionToken != null) {
    HttpRequest paymentRequest = new HttpRequest();
    paymentRequest.setEndpoint(baseUrl + '/payment.do');
    paymentRequest.setMethod('POST');
    paymentRequest.setHeader('Content-Type', 'application/json');
    
    // Test card details for sandbox
    Map<String, Object> testCard = new Map<String, Object>{
        'cardNumber' => '4000027891380961', // Nuvei sandbox test visa card
        'cardHolderName' => 'Test User',
        'expirationMonth' => '12',
        'expirationYear' => '2025',
        'CVV' => '217' // Test CVV
    };

    Map<String, Object> deviceDetails = new Map<String, Object>{
        'ipAddress' => '223.184.175.143'
    };

    Map<String, Object> billingAddress = new Map<String, Object>{
        'firstName'=> 'John',
        'lastName'=> 'Smith',
        'email'=> 'john.smith@email.com',
        'country'=> 'US'
    };
    
    // Payment parameters
    String paymentClientRequestId = 'PAY_' + String.valueOf(Datetime.now().getTime());
    String paymentTimestamp = Datetime.now().format('yyyyMMddHHmmss');
    String amount = '5.00'; // Test amount
    String currencyCode = 'USD';
    
    // Generate payment checksum 
    String paymentChecksumInput = merchantId + merchantSiteId + paymentClientRequestId + 
                               amount + currencyCode + paymentTimestamp + secretKey;
    String paymentChecksum = EncodingUtil.convertToHex(
        Crypto.generateDigest('SHA-256', Blob.valueOf(paymentChecksumInput))
    );
    
    // Build payment request for sandbox
    Map<String, Object> paymentBody = new Map<String, Object>{
        'merchantId' => merchantId,
        'merchantSiteId' => merchantSiteId,
        'clientRequestId' => paymentClientRequestId,
        'sessionToken' => sessionToken,
        'currency' => currencyCode,
        'amount' => amount,
        'paymentOption' => new Map<String, Object>{
            'card' => testCard
        },
        'deviceDetails' => deviceDetails,
        'billingAddress' => billingAddress,
        'timeStamp' => paymentTimestamp,
        'checksum' => paymentChecksum
    };
    System.debug('Payment Body: ' + JSON.serialize(paymentBody));
    paymentRequest.setBody(JSON.serialize(paymentBody));
    
    // Execute payment request
    HttpResponse paymentResponse = http.send(paymentRequest);
    
    // Debug full response
    System.debug('Payment Response: ' + paymentResponse.getBody());
    
    // Parse response
    Map<String, Object> paymentResult = (Map<String, Object>)JSON.deserializeUntyped(paymentResponse.getBody());
    System.debug('Payment Status: ' + paymentResult.get('status'));
    System.debug('Transaction ID: ' + paymentResult.get('transactionId'));
} else {
    System.debug('Failed to obtain session token');
}
